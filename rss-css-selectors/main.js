(()=>{"use strict";var e,t,n;function a(e,t){const n=document.createElement("div");n.innerHTML=e;const a=n.firstChild;return t&&(Array.isArray(t)?a.classList.add(...t):a.classList.add(t)),a}!function(e){e.ALLY_HIDDEN="visually-hidden",e.WRAPPER="page-srapper",e.LIGHTUP="lightup"}(e||(e={})),function(e){e.CHECK="check-mark",e.HELP="help-mark",e.NEW="new-mark"}(t||(t={})),function(e){e.DESCRIPTION='<svg id="description" "width="24" height="24" viewBox="0 0 24 24">\n  <path fill-rule="evenodd" d="M3.62 1.55c.57-.58 1.35-.9 2.17-.9h8.28a1 1 0 0 1 .7.29L21 7.15a1 1 0 0 1 .3.7v12.43a3.07 3.07 0 0 1-3.08 3.07H5.8a3.07 3.07 0 0 1-3.07-3.07V3.72c0-.82.32-1.6.9-2.17Zm2.17 1.1a1.07 1.07 0 0 0-1.07 1.07v16.56a1.07 1.07 0 0 0 1.07 1.07H18.2a1.07 1.07 0 0 0 1.07-1.07v-12l-5.62-5.63H5.79Z" clip-rule="evenodd"/>\n  <path fill-rule="evenodd" d="M14.07.65a1 1 0 0 1 1 1v5.2h5.21a1 1 0 1 1 0 2h-6.2a1 1 0 0 1-1-1v-6.2a1 1 0 0 1 1-1ZM6.86 13.04a1 1 0 0 1 1-1h8.28a1 1 0 0 1 0 2H7.86a1 1 0 0 1-1-1ZM6.86 17.18a1 1 0 0 1 1-1h8.28a1 1 0 0 1 0 2H7.86a1 1 0 0 1-1-1ZM6.86 8.9a1 1 0 0 1 1-1h2.07a1 1 0 1 1 0 2H7.86a1 1 0 0 1-1-1Z" clip-rule="evenodd"/>\n</svg>',e.NOT_SET='<svg id="not-set" width="22" height="22" viewBox="0 0 22 22" fill-rule="evenodd">\n  <path fill="red" d="M11 0a11 11 0 1 0 11 11A11 11 0 0 0 11 0Zm5.71 15.29a1 1 0 0 1 0 1.42 1 1 0 0 1-1.41 0L11 12.42l-4.3 4.29a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.42L9.59 11 5.3 6.71a1 1 0 0 1 0-1.42 1 1 0 0 1 1.41 0L11 9.59l4.29-4.3a1 1 0 0 1 1.41 0 1 1 0 0 1 0 1.42L12.42 11Z"/>\n  <path d="M16.71 15.29a1 1 0 0 1 0 1.42 1 1 0 0 1-1.41 0L11 12.42l-4.3 4.29a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.42L9.59 11 5.3 6.71a1 1 0 0 1 0-1.42 1 1 0 0 1 1.41 0L11 9.59l4.29-4.3a1 1 0 0 1 1.41 0 1 1 0 0 1 0 1.42L12.42 11Z"/>\n</svg>',e.LOGO='<svg id= "logo" width="94" height="19" fill="none" viewBox="0 0 94 19">\n  <g clip-path="url(#a)">\n    <path fill="#D9BB83" d="M2.4 15.32H0v-14h6.02c1.36 0 2.4.38 3.12 1.14.733.747 1.1 1.8 1.1 3.16 0 .947-.213 1.773-.64 2.48-.413.693-1.02 1.213-1.82 1.56l2.62 4.86v.8H8.04L5.16 9.94H2.4v5.38Zm0-11.9V7.9h3.18c1.48 0 2.22-.747 2.22-2.24 0-1.493-.74-2.24-2.22-2.24H2.4ZM17.743 15.62c-1.546 0-2.846-.413-3.9-1.24-1.027-.84-1.54-2.04-1.54-3.6h2.4c0 .64.174 1.173.52 1.6.613.693 1.5 1.04 2.66 1.04.827 0 1.467-.167 1.92-.5.467-.333.7-.773.7-1.32 0-.507-.22-.887-.66-1.14-.44-.28-1.24-.64-2.4-1.08l-.18-.06-.32-.12c-1.533-.587-2.627-1.147-3.28-1.68-.653-.56-.98-1.367-.98-2.42 0-1.24.447-2.227 1.34-2.96.907-.747 2.14-1.12 3.7-1.12 1.627 0 2.9.4 3.82 1.2.92.787 1.38 1.96 1.38 3.52h-2.4c0-.84-.26-1.467-.78-1.88-.506-.427-1.186-.64-2.04-.64-.787 0-1.42.16-1.9.48-.467.32-.7.727-.7 1.22 0 .56.207.967.62 1.22.427.253 1.227.593 2.4 1.02l.28.1c.707.24 1.307.473 1.8.7.454.2.927.467 1.42.8.947.64 1.42 1.547 1.42 2.72 0 1.253-.466 2.26-1.4 3.02-.92.747-2.22 1.12-3.9 1.12ZM30.575 15.62c-1.546 0-2.846-.413-3.9-1.24-1.027-.84-1.54-2.04-1.54-3.6h2.4c0 .64.174 1.173.52 1.6.614.693 1.5 1.04 2.66 1.04.827 0 1.467-.167 1.92-.5.467-.333.7-.773.7-1.32 0-.507-.22-.887-.66-1.14-.44-.28-1.24-.64-2.4-1.08l-.18-.06-.32-.12c-1.533-.587-2.627-1.147-3.28-1.68-.653-.56-.98-1.367-.98-2.42 0-1.24.447-2.227 1.34-2.96.907-.747 2.14-1.12 3.7-1.12 1.627 0 2.9.4 3.82 1.2.92.787 1.38 1.96 1.38 3.52h-2.4c0-.84-.26-1.467-.78-1.88-.507-.427-1.187-.64-2.04-.64-.787 0-1.42.16-1.9.48-.466.32-.7.727-.7 1.22 0 .56.207.967.62 1.22.427.253 1.227.593 2.4 1.02l.28.1c.707.24 1.307.473 1.8.7.454.2.927.467 1.42.8.947.64 1.42 1.547 1.42 2.72 0 1.253-.467 2.26-1.4 3.02-.92.747-2.22 1.12-3.9 1.12Z"/>\n    <path fill="#FFB526" d="M47.832 16.52v2c-1.16 0-2.067-.34-2.72-1.02-.654-.68-.98-1.62-.98-2.82v-2.96c0-1.053-.38-1.58-1.14-1.58h-.52v-2h.52c.76 0 1.14-.527 1.14-1.58V3.84c0-1.2.327-2.14.98-2.82.653-.68 1.56-1.02 2.72-1.02v2c-.467 0-.834.16-1.1.48-.267.32-.4.733-.4 1.24v3.42c0 .96-.407 1.627-1.22 2 .813.373 1.22 1.04 1.22 2v3.66c0 .507.133.92.4 1.24.267.32.633.48 1.1.48Z"/>\n    <path fill="#63CCFC" d="M55.47 15.62c-1.734 0-3.074-.44-4.02-1.32-.947-.88-1.42-2.12-1.42-3.72V6.06c0-1.6.473-2.84 1.42-3.72.946-.88 2.286-1.32 4.02-1.32 1.48 0 2.706.407 3.68 1.22.986.827 1.48 2.033 1.48 3.62v.2h-2.4v-.2c0-.867-.287-1.52-.86-1.96a3.02 3.02 0 0 0-1.92-.68c-1 0-1.754.233-2.26.7-.507.453-.76 1.113-.76 1.98v4.84c0 .867.253 1.533.76 2 .506.453 1.26.68 2.26.68.706 0 1.346-.22 1.92-.66.573-.453.86-1.113.86-1.98v-.2h2.4v.2c0 1.587-.494 2.793-1.48 3.62-.974.813-2.2 1.22-3.68 1.22ZM68.173 15.62c-1.547 0-2.847-.413-3.9-1.24-1.027-.84-1.54-2.04-1.54-3.6h2.4c0 .64.173 1.173.52 1.6.613.693 1.5 1.04 2.66 1.04.826 0 1.466-.167 1.92-.5.466-.333.7-.773.7-1.32 0-.507-.22-.887-.66-1.14-.44-.28-1.24-.64-2.4-1.08l-.18-.06-.32-.12c-1.534-.587-2.627-1.147-3.28-1.68-.654-.56-.98-1.367-.98-2.42 0-1.24.447-2.227 1.34-2.96.906-.747 2.14-1.12 3.7-1.12 1.626 0 2.9.4 3.82 1.2.92.787 1.38 1.96 1.38 3.52h-2.4c0-.84-.26-1.467-.78-1.88-.507-.427-1.187-.64-2.04-.64-.787 0-1.42.16-1.9.48-.467.32-.7.727-.7 1.22 0 .56.207.967.62 1.22.426.253 1.226.593 2.4 1.02l.28.1c.707.24 1.306.473 1.8.7.453.2.927.467 1.42.8.947.64 1.42 1.547 1.42 2.72 0 1.253-.467 2.26-1.4 3.02-.92.747-2.22 1.12-3.9 1.12ZM81.005 15.62c-1.547 0-2.847-.413-3.9-1.24-1.027-.84-1.54-2.04-1.54-3.6h2.4c0 .64.173 1.173.52 1.6.613.693 1.5 1.04 2.66 1.04.827 0 1.467-.167 1.92-.5.466-.333.7-.773.7-1.32 0-.507-.22-.887-.66-1.14-.44-.28-1.24-.64-2.4-1.08l-.18-.06-.32-.12c-1.534-.587-2.627-1.147-3.28-1.68-.653-.56-.98-1.367-.98-2.42 0-1.24.447-2.227 1.34-2.96.907-.747 2.14-1.12 3.7-1.12 1.627 0 2.9.4 3.82 1.2.92.787 1.38 1.96 1.38 3.52h-2.4c0-.84-.26-1.467-.78-1.88-.507-.427-1.187-.64-2.04-.64-.787 0-1.42.16-1.9.48-.467.32-.7.727-.7 1.22 0 .56.207.967.62 1.22.427.253 1.227.593 2.4 1.02l.28.1c.706.24 1.306.473 1.8.7.453.2.926.467 1.42.8.947.64 1.42 1.547 1.42 2.72 0 1.253-.467 2.26-1.4 3.02-.92.747-2.22 1.12-3.9 1.12Z"/>\n    <path fill="#FFB526" d="M88.297 18.52v-2c.466 0 .833-.16 1.1-.48.266-.32.4-.733.4-1.24v-3.66c0-.96.407-1.627 1.22-2-.813-.373-1.22-1.04-1.22-2V3.72c0-.507-.133-.92-.4-1.24-.267-.32-.634-.48-1.1-.48V0c1.16 0 2.067.34 2.72 1.02.653.68.98 1.62.98 2.82v2.72c0 1.053.38 1.58 1.14 1.58h.52v2h-.52c-.76 0-1.14.527-1.14 1.58v2.96c0 1.2-.327 2.14-.98 2.82-.653.68-1.56 1.02-2.72 1.02Z"/>\n  </g>\n  <defs>\n    <clipPath id="a">\n      <path fill="#fff" d="M0 0h93.657v18.52H0z"/>\n    </clipPath>\n  </defs>\n</svg>',e.SCHOOL_ICON='<svg id="school-icon" width="65" height="24" viewBox="0 0 96 35">\n  <g clip-path="url(#b)">\n  <path d="M6.68 10.43h.4c.41 0 .82.12 1.16.36.26.19.53.58.86 1.18l2.52 4.69h5.35l-2.28-4.42a5.3 5.3 0 0 0-.67-.95 4.75 4.75 0 0 0-.75-.8 4.7 4.7 0 0 0-1.22-.57 5.2 5.2 0 0 0 1.65-.6 4.08 4.08 0 0 0 2.03-3.68A4.24 4.24 0 0 0 15 3.17a3.53 3.53 0 0 0-1.86-1.4c-.76-.25-1.89-.37-3.34-.37H1.95v15.24l4.73-.02v-6.19Zm0-5.95h2.07c.86 0 1.45.14 1.76.4a1.52 1.52 0 0 1 .17 2 1.2 1.2 0 0 1-.77.48c-.4.1-.81.18-1.24.2h-2V4.49Zm15.87 26.24c-.46.5-1.15.75-2.05.75-.94 0-1.65-.3-2.16-.94-.52-.63-.77-1.79-.77-3.47 0-1.37.22-2.37.65-3a2.74 2.74 0 0 1 2.45-1.3 2.7 2.7 0 0 1 2.71 2.15l4.16-.92a7.03 7.03 0 0 0-2.45-3.58c-1.11-.77-2.61-1.16-4.54-1.16-2.45 0-4.35.68-5.7 2.03-.35.35-.67.76-.93 1.22a4.15 4.15 0 0 0-1.53-2.16c-1.03-.73-2.51-1.1-4.45-1.1-1.59 0-2.85.21-3.75.6-.84.33-1.54.9-2.05 1.64a3.95 3.95 0 0 0-.68 2.22 3.7 3.7 0 0 0 1.33 2.95c.87.78 2.35 1.4 4.41 1.85 1.28.28 2.08.58 2.42.9a1.35 1.35 0 0 1-.03 2.14c-.36.32-.89.48-1.55.48-.9 0-1.6-.33-2.08-.94-.3-.4-.5-.94-.6-1.67l-4.48.29a6 6 0 0 0 1.7 3.82c1 1 2.8 1.5 5.4 1.5 1.46 0 2.68-.22 3.66-.65a5.17 5.17 0 0 0 2.54-2.35 6.37 6.37 0 0 0 2.54 2.26c1.04.48 2.4.72 4.05.72 1.37 0 2.5-.2 3.38-.6.87-.39 1.64-.99 2.22-1.75a7.7 7.7 0 0 0 1.3-2.9l-4.12-1.25c-.2.96-.54 1.7-1 2.22Zm-14.82-6.2c-.83-.18-1.36-.36-1.58-.57a.82.82 0 0 1-.34-.65 1 1 0 0 1 .4-.85c.28-.24.69-.36 1.23-.36.67-.01 1.2.14 1.57.46.4.33.63.82.75 1.5l3.55-.2c-.24.73-.4 1.53-.45 2.44a6.92 6.92 0 0 0-.7-.43c-.9-.46-2.37-.9-4.43-1.34Zm47.28-5.29c-2.48 0-4.42.7-5.8 2.08a6.49 6.49 0 0 0-1.43 2.17V19.5h-4.74v5.34h-5.15V19.5h-4.7v15.24h4.7v-6.17h5.15v6.17h4.74v-3.99a6.5 6.5 0 0 0 3.15 3.43c1.13.55 2.54.82 4.26.82 1.7 0 3.1-.32 4.25-.95a6.39 6.39 0 0 0 2.6-2.66c.59-1.15.9-2.6.9-4.39 0-2.45-.69-4.36-2.07-5.72-1.38-1.37-3.32-2.05-5.86-2.05Zm2.37 11.25a2.9 2.9 0 0 1-2.36 1 2.9 2.9 0 0 1-2.33-1.01c-.56-.69-.85-1.8-.85-3.33 0-1.55.29-2.66.87-3.32a2.89 2.89 0 0 1 2.28-1c.99 0 1.77.31 2.35.98.58.65.87 1.7.87 3.14 0 1.7-.27 2.88-.83 3.54Z"/>\n  <path d="M87.77 31V19.5h-4.72v4.27a6.5 6.5 0 0 0-1.55-2.48c-1-1-2.32-1.63-3.96-1.89.2-.14.4-.27.6-.43a12.42 12.42 0 0 0 4.67-6.88 8.45 8.45 0 0 0-1.33-7.23C78.4.78 71.9.49 67 4.19a12.64 12.64 0 0 0-4.14 5.3 4.58 4.58 0 0 0-2-1.77c-.9-.46-2.37-.9-4.43-1.34-.83-.17-1.36-.36-1.58-.57a.82.82 0 0 1-.34-.64c-.02-.35.15-.65.4-.86.28-.22.69-.34 1.23-.34.67 0 1.18.16 1.57.48.4.32.63.82.75 1.5l4.43-.26c-.18-1.6-.8-2.76-1.82-3.47-1.02-.74-2.5-1.1-4.45-1.1-1.59 0-2.85.21-3.75.6-.84.33-1.54.9-2.05 1.64a3.95 3.95 0 0 0-.68 2.21 3.7 3.7 0 0 0 1.33 2.95c.87.79 2.35 1.4 4.42 1.86 1.26.28 2.06.58 2.4.89a1.35 1.35 0 0 1-.03 2.15c-.36.32-.9.47-1.56.47-.9 0-1.58-.3-2.08-.92-.3-.39-.49-.93-.6-1.67l-4.48.3c.12 1.53.72 2.79 1.73 3.8 1 1 2.8 1.5 5.38 1.5 1.47 0 2.7-.23 3.67-.65.71-.31 1.36-.79 1.87-1.37a8 8 0 0 0 1.47 3.41 8.36 8.36 0 0 0 6 3.2c-1.26 1.37-1.9 3.25-1.9 5.63a8.7 8.7 0 0 0 1.07 4.47 6.5 6.5 0 0 0 2.74 2.6c1.13.54 2.54.81 4.26.81 1.69 0 3.1-.32 4.25-.95a6.39 6.39 0 0 0 2.98-3.58v4.27h12.07V31h-7.35ZM63.4 11.65c0-.32-.01-.65-.08-.95.68-2.24 2.15-4.3 4.2-5.85a11.67 11.67 0 0 1 6.93-2.42 7.8 7.8 0 0 1 6.36 2.93 7.62 7.62 0 0 1 1.18 6.53 11.49 11.49 0 0 1-4.35 6.4c-.46.35-.95.66-1.45.95l-.55-.02c-2.07 0-3.8.5-5.1 1.48h-.25a7.69 7.69 0 0 1-5.95-2.93 7.11 7.11 0 0 1-1.41-3.99c.3-.67.47-1.4.47-2.13ZM78 30.48a2.9 2.9 0 0 1-2.35 1 2.9 2.9 0 0 1-2.33-1.01c-.57-.69-.86-1.8-.86-3.33 0-1.55.3-2.66.87-3.32a2.86 2.86 0 0 1 2.29-1c.99 0 1.77.31 2.35.98.58.65.87 1.7.87 3.14 0 1.7-.27 2.88-.84 3.54Z"/>\n  <path d="M70.25 15.12a.54.54 0 0 1-.33.12.7.7 0 0 1-.4-.14c-.18-.13-.33-.3-.45-.49l-1.46 1.36c.27.38.63.67 1.04.87.37.17.78.24 1.17.17.41-.06.89-.29 1.45-.68.48-.3.84-.73 1.06-1.24a2 2 0 0 0 .08-1.3 5.93 5.93 0 0 0-.83-1.55l-2.1-2.98-1.7 1.2 2.38 3.35c.19.22.31.51.36.8.02.2-.1.41-.27.51Zm2.57-4.36c.51.05 1.2-.09 2.07-.45.52-.22.88-.3 1.09-.29.05 0 .1.02.15.04.3.1.48.44.37.75-.06.24-.23.42-.44.56a1.1 1.1 0 0 1-.99.19 1.47 1.47 0 0 1-.63-.44l-1.55 1.22c.4.5.94.84 1.6.94.62.1 1.38-.17 2.32-.82.46-.3.85-.7 1.16-1.16a2.15 2.15 0 0 0-.05-2.42c-.19-.3-.46-.52-.78-.66A1.96 1.96 0 0 0 76 8.1c-.44.07-1.1.27-1.94.63-.34.15-.58.22-.72.2a.38.38 0 0 1-.29-.15.44.44 0 0 1-.07-.4.84.84 0 0 1 .36-.45l.05-.05a.92.92 0 0 1 1.28.17l1.53-1.21c-.47-.53-.98-.79-1.53-.79s-1.18.24-1.9.74c-.47.3-.86.7-1.19 1.15-.21.33-.32.72-.32 1.11.02.34.12.68.32.97.28.43.74.69 1.23.74Z"/>\n  </g>\n  <defs>\n  <clipPath id="b">\n      <path d="M.88 0h94.24v35H.88z"/>\n  </clipPath>\n  </defs>\n</svg>',e.GITHUB_ICON='<svg id="github-icon "width="24" height="24" viewBox="0 0 35 35">\n    <g clip-path="url(#c)">\n      <path fill-rule="evenodd" clip-rule="evenodd" d="M17.5 0a17.52 17.52 0 0 0-5.58 34.13c.88.1 1.2-.33 1.2-.88v-3.06c-4.8 1.1-5.9-2.3-5.9-2.3-.77-1.97-1.97-2.52-1.97-2.52-1.64-1.09.1-1.09.1-1.09 1.76.11 2.74 1.75 2.74 1.75 1.53 2.63 4.05 1.86 5.14 1.42.11-1.1.66-1.86 1.1-2.3-3.94-.43-7.99-1.96-7.99-8.63 0-1.86.66-3.5 1.75-4.7-.22-.45-.76-2.2.22-4.6 0 0 1.42-.44 4.81 1.75 1.43-.44 2.85-.55 4.38-.55 1.53 0 2.95.22 4.37.55 3.4-2.3 4.82-1.75 4.82-1.75.98 2.4.33 4.16.22 4.6a6.72 6.72 0 0 1 1.75 4.7c0 6.67-4.05 8.2-7.99 8.64.66.54 1.2 1.64 1.2 3.17v4.81c0 .44.33.98 1.2.77A17.04 17.04 0 0 0 35 17.5C35 7.87 27.12 0 17.5 0Z"/>\n    </g>\n    <defs>\n      <clipPath id="c">\n        <path fill="#fff" d="M0 0h35v35H0z"/>\n      </clipPath>\n    </defs>\n</svg>',e.CHECKMARK='<svg id="checkmark" "width="24" height="24" viewBox="0 0 24 24">\n  <path fill-rule="evenodd" d="M20.707 5.293a1 1 0 0 1 0 1.414l-11 11a1 1 0 0 1-1.414 0l-5-5a1 1 0 1 1 1.414-1.414L9 15.586 19.293 5.293a1 1 0 0 1 1.414 0Z" clip-rule="evenodd"/>\n</svg>',e.MENU='<svg id="menu-extend" width="24" height="24" viewBox="0 0 24 24">\n  <path fill-rule="evenodd" d="M0 12a1 1 0 0 1 1-1h22a1 1 0 1 1 0 2H1a1 1 0 0 1-1-1ZM0 5a1 1 0 0 1 1-1h22a1 1 0 1 1 0 2H1a1 1 0 0 1-1-1ZM0 19a1 1 0 0 1 1-1h22a1 1 0 1 1 0 2H1a1 1 0 0 1-1-1Z" clip-rule="evenodd"/>\n</svg>',e.ARROW='<svg  id="arrow-right-extend" width="24" height="24" viewBox="0 0 24 24">\n  <path fill-rule="evenodd" d="M6.83.78a1 1 0 0 1 1.4.03l10 10.5a1 1 0 0 1 0 1.38l-10 10.5a1 1 0 0 1-1.44-1.38L16.13 12 6.8 2.19A1 1 0 0 1 6.83.78Z" clip-rule="evenodd"/>\n</svg>',e.HELP_MARK='<svg id="help-mark" "width="24" height="24" viewBox="0 0 24 24">\n  <path d="M8.66 6.92A.73.73 0 0 1 8 6.8a.7.7 0 0 1-.3-.6c0-.3.09-.55.26-.78.19-.24.43-.39.72-.44 1.3-.25 2.55-.38 3.72-.38 1.57 0 2.78.31 3.62.94A2.88 2.88 0 0 1 17.3 8c0 .47-.06.89-.18 1.26a2.6 2.6 0 0 1-.6.98c-.27.3-.5.53-.7.7-.2.16-.5.37-.88.64-.43.3-.75.53-.96.7-.2.16-.43.4-.68.72-.25.3-.43.64-.54 1-.1.3-.25.57-.48.78a1.1 1.1 0 0 1-1.56 0 .88.88 0 0 1-.22-.78 3.83 3.83 0 0 1 1.06-1.98 8.34 8.34 0 0 1 1.54-1.26c.44-.3.77-.55.98-.72.21-.19.42-.44.62-.76.2-.33.3-.7.3-1.08 0-1.17-.97-1.76-2.9-1.76-1.05 0-2.2.16-3.44.48Zm2.78 9.88h.12c.3 0 .57.11.8.34.23.23.34.5.34.8v.32c0 .3-.11.57-.34.8-.23.23-.5.34-.8.34h-.12c-.3 0-.57-.11-.8-.34a1.1 1.1 0 0 1-.34-.8v-.32c0-.3.11-.57.34-.8.23-.23.5-.34.8-.34Z"/>\n  <path fill-rule="evenodd" d="M19 2H5a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3V5a3 3 0 0 0-3-3ZM5 0a5 5 0 0 0-5 5v14a5 5 0 0 0 5 5h14a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5H5Z" clip-rule="evenodd"/>\n</svg>',e.NEW_MARK='<svg id="new-mark" "width="24" height="24" viewBox="0 0 24 24">\n  <path d="M8.54 18.98c-.21.21-.47.32-.76.32-.3 0-.55-.1-.76-.32a1.04 1.04 0 0 1-.32-.76V5.78c0-.3.1-.55.32-.76.21-.21.47-.32.76-.32.7 0 1.25.31 1.62.94l5.68 9.94c0 .01.01.02.04.02.01 0 .02 0 .02-.02v-9.8c0-.3.1-.55.32-.76.21-.21.47-.32.76-.32.3 0 .55.1.76.32.21.21.32.47.32.76v12.44c0 .3-.1.55-.32.76-.21.21-.47.32-.76.32-.7 0-1.25-.31-1.62-.94L8.9 8.42c0-.01 0-.02-.02-.02-.01 0-.02 0-.02.02v9.8c0 .3-.1.55-.32.76Z"/>\n  <path fill-rule="evenodd" d="M19 2H5a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3V5a3 3 0 0 0-3-3ZM5 0a5 5 0 0 0-5 5v14a5 5 0 0 0 5 5h14a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5H5Z" clip-rule="evenodd"/>\n</svg>',e.CHECK_MARK='<svg id="check-mark" "width="24" height="24" viewBox="0 0 24 24">\n  <path fill-rule="evenodd" d="M19 2H5a3 3 0 0 0-3 3v14a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3V5a3 3 0 0 0-3-3ZM5 0a5 5 0 0 0-5 5v14a5 5 0 0 0 5 5h14a5 5 0 0 0 5-5V5a5 5 0 0 0-5-5H5Z" clip-rule="evenodd"/>\n  <path fill-rule="evenodd" d="M19.33 6.74a1 1 0 0 1 0 1.42l-9.1 9.1a1 1 0 0 1-1.42 0l-4.14-4.14a1 1 0 1 1 1.42-1.41l3.43 3.43 8.4-8.4a1 1 0 0 1 1.4 0Z" clip-rule="evenodd"/>\n</svg>',e.CROSS='<svg id="cross" "width="24" height="24" viewBox="0 0 24 24">\n  <g clip-path="url(#e)">\n    <path fill-rule="evenodd" d="M.79.79a1 1 0 0 1 1.41 0l9.8 9.8 9.8-9.8A1 1 0 0 1 23.2 2.2l-9.8 9.8 9.8 9.8a1 1 0 0 1-1.41 1.41l-9.8-9.8-9.8 9.8A1 1 0 0 1 .8 21.8l9.8-9.8-9.8-9.8A1 1 0 0 1 .79.8Z" clip-rule="evenodd"/>\n  </g>\n  <defs>\n    <clipPath id="e">\n      <path fill="#fff" d="M0 0h24v24H0z"/>\n    </clipPath>\n  </defs>\n</svg>'}(n||(n={}));const l=(e,t)=>{const n=Object.assign({},e,t);if(e.className||(null==t?void 0:t.className)){n.className=[];const a=[e.className||[],(null==t?void 0:t.className)||[]].flat(1);n.className.push(...a)}return(null==t?void 0:t.tagName)&&(n.tagName=e.tagName),n};class s{constructor({tagName:e="div",className:t=[],textContent:n="",parentComponent:a,title:l}={}){this.node=document.createElement(e),this.addClass(t),this.node.textContent=n,a&&a.append(this),l&&(this.node.title=l)}append(...e){for(const t of e)t instanceof s?this.node.append(t.getNode()):this.node.append(t)}getNode(){return this.node}addClass(e){Array.isArray(e)?this.node.classList.add(...e):e&&this.node.classList.add(e)}removeClass(e){this.node.classList.remove(e)}toggleClass(e,t){this.node.classList.toggle(e,t)}destroy(){this.node.remove()}}const o={tagName:"button",className:"button"};class i extends s{constructor(e){var t;const n=l(o,e);if(super(n),this.node.type=null!==(t=n.type)&&void 0!==t?t:"button",n.svgIcon){const e=a(n.svgIcon);this.setSvgIcon(e)}n.allyLabel&&this.append(new s({tagName:"span",className:"visually-hidden",textContent:n.allyLabel}))}setSvgIcon(e){this.node.append(e)}setClickHandler(e){"function"==typeof e&&this.getNode().addEventListener("click",(t=>{if(t.target instanceof Element){t.target.closest("button")&&e()}}))}}const r={tagName:"section",className:"help"},c="Examples",p="Help",h={ROOT:r.className,TITLE:`${r.className}__title`,HEADLINE:`${r.className}__headline`,MENU_BUTTON:"button--burger-menu",NAVIGATION:`${r.className}__navigation`,NAVIGATION_SIGN:`${r.className}__navigation-sign`,NAVIGATION_SIGN_TEXT:`${r.className}__navigation-sign-text`,NAVIGATION_SIGN_MARKS_CONT:`${r.className}__sign-marks`,NAVIGATION_CONTROLS:`${r.className}__navigation-controls`,TEXT:`${r.className}__text`,TEXT_SELECTOR_NAME:`${r.className}__text-title`,TEXT_HELP_TITLE:`${r.className}__text-description`,TEXT_SYNTAX:`${r.className}__text-syntax`,TEXT_HINT:`${r.className}__text-hint`,TEXT_EXAMPLE_LIST:`${r.className}__text-examples`,TEXT_EXAMPLE:`${r.className}__text-example`,TEXT_EXAMPLE_TITLE:`${r.className}__examples-title`};class d extends s{constructor(t,n){super(l(r,n));const a=new s({tagName:"h3",className:[h.TITLE,e.ALLY_HIDDEN],textContent:p}),{headLine:o,prevLevelButton:i,nextLevelButton:c,menuButton:d}=this.setHeadline(t);this.prevLevelButton=i,this.nextLevelButton=c,this.menuButton=d;const m=this.setTextContent(t);this.append(a,o,m)}setNavigationSign(e){const l=new s({tagName:"div",className:h.NAVIGATION_SIGN}),{levels:o,currentLevel:i}=e,r=o.findIndex((e=>e===i)),c=new s({tagName:"span",className:h.NAVIGATION_SIGN_TEXT,textContent:`Level ${r+1} of ${o.length}`}),p=new s({tagName:"div",className:h.NAVIGATION_SIGN_MARKS_CONT});return i.isComplete&&p.append(a(n.CHECK_MARK,t.CHECK)),i.isWithHelp&&p.append(a(n.HELP_MARK,t.HELP)),i.isNew&&p.append(a(n.NEW_MARK,t.NEW)),l.append(c,p),l}setHeadline(e){const t=new s({tagName:"div",className:h.HEADLINE}),a=new s({tagName:"div",className:h.NAVIGATION}),l=this.setNavigationSign(e),o=new i({className:["button--navigation","button--navigation-prev"],allyLabel:"previous task",svgIcon:n.ARROW}),r=new i({className:["button--navigation","button--navigation-next"],allyLabel:"next task",svgIcon:n.ARROW}),c=new s({tagName:"div",className:h.NAVIGATION_CONTROLS});c.append(o,r),a.append(l,c);const p=new i({className:h.MENU_BUTTON,allyLabel:"Open / close menu",svgIcon:n.MENU});return t.append(a,p),{headLine:t,prevLevelButton:o,nextLevelButton:r,menuButton:p}}setTextContent(e){const{currentLevel:t}=e,n=new s({tagName:"div",className:h.TEXT});if(t.selectorName&&new s({tagName:"p",className:h.TEXT_SELECTOR_NAME,textContent:t.selectorName,parentComponent:n}),t.helpTitle&&new s({tagName:"p",className:h.TEXT_HELP_TITLE,textContent:t.helpTitle,parentComponent:n}),new s({tagName:"p",className:h.TEXT_SYNTAX,textContent:t.syntax,parentComponent:n}),t.help){new s({tagName:"p",className:h.TEXT_HINT,parentComponent:n}).getNode().append(a(t.help))}if(t.examples){new s({tagName:"p",className:h.TEXT_EXAMPLE_TITLE,textContent:c,parentComponent:n});const e=new s({tagName:"ul",className:h.TEXT_EXAMPLE_LIST,parentComponent:n});for(const n of t.examples){const t=new s({tagName:"li",className:h.TEXT_EXAMPLE});t.getNode().innerHTML=n,e.append(t)}}return n}setPrevLevelButtonClickHandler(e){this.prevLevelButton.setClickHandler(e)}setNextLevelButtonClickHandler(e){this.nextLevelButton.setClickHandler(e)}setMenuButtonClickHandler(e){this.menuButton.setClickHandler(e)}}const m={tagName:"section",className:"menu"},g="Choose a level",u="Reset Progress",T={ROOT:m.className,TITLE:`${m.className}__title`,HEADLINE:`${m.className}__headline`,CLOSE_BUTTON:[`${m.className}__button`,"button--navigation"],LIST:`${m.className}__task-list`,LIST_ITEM:`${m.className}__item`,LIST_ITEM_CURRENT:`${m.className}__item--current`,LIST_ITEM_NUMBER:`${m.className}__item-number`,LIST_ITEM_NAME:`${m.className}__item-name`,LIST_ITEM_COMPELTE:`${m.className}__item--complete`,COMPLETE_MARK:`${m.className}__complete-mark`,RESET_BUTTON:[`${m.className}__reset-button`,"button--bordered"]};class N extends s{constructor(e,t){super(l(m,t));const{taskItemComponents:n,closeButton:a,resetButton:s}=this.setChildComponents(e);this.taskItemComponents=n,this.closeButton=a,this.resetButton=s}setTaskListComponent(e){const{levels:l,currentLevel:o}=e,i=l.findIndex((e=>e===o)),r=new s({tagName:"ol",className:T.LIST}),c=l.map(((e,l)=>{const o=new s({tagName:"li",className:[T.LIST_ITEM,e.isComplete?T.LIST_ITEM_COMPELTE:T.LIST_ITEM,i===l?T.LIST_ITEM_CURRENT:T.LIST_ITEM]}),r=a(n.CHECK_MARK,t.CHECK),c=new s({tagName:"span",className:T.LIST_ITEM_NUMBER,textContent:(l+1).toString()}),p=new s({tagName:"span",className:T.LIST_ITEM_NAME,textContent:e.syntax});return o.append(r,c,p),e.isWithHelp&&o.append(a(n.HELP_MARK,t.HELP)),e.isNew&&o.append(a(n.NEW_MARK,t.NEW)),o}));return r.append(...c),{taskItemComponents:c,listComponent:r}}setChildComponents(t){const a=new s({tagName:"h3",className:[T.TITLE,e.ALLY_HIDDEN],textContent:"Menu"}),l=new i({className:T.CLOSE_BUTTON,allyLabel:"Close menu",svgIcon:n.CROSS}),o=new s({tagName:"p",className:T.HEADLINE,textContent:g});o.append(l);const r=new i({className:T.RESET_BUTTON,textContent:u}),{taskItemComponents:c,listComponent:p}=this.setTaskListComponent(t);return this.append(a,o,p,r),{closeButton:l,resetButton:r,taskItemComponents:c}}setCloseButtonClickHandler(e){this.closeButton.setClickHandler(e)}setResetButtonClickHandler(e){this.resetButton.setClickHandler(e)}setListItemClickHandler(e){for(const t of this.taskItemComponents)t.getNode().addEventListener("click",(t=>{if("function"!=typeof e)return;if(!(t.target instanceof Element))return;const n=t.target.closest(`.${T.LIST_ITEM}`);if(n){const t=n.parentElement,a=Array.from(t.children).findIndex((e=>e===n));e(a)}}))}}const E={tagName:"section",className:"task"},v={ROOT:E.className,BUTTON_PANEL:`${E.className}__button-side-panel`,BUTTONS:"button--navigation"},f="Menu",C="Level description";class b extends s{constructor(e){super(l(E,e));const{buttonPanel:t,panelMenuButton:n,panelHelpButton:a}=this.setButtonPanel();this.panelMenuButton=n,this.panelHelpButton=a,this.buttonPanel=t}setButtonPanel(){const e=new s({tagName:"div",className:v.BUTTON_PANEL,parentComponent:this});return{buttonPanel:e,panelMenuButton:new i({className:v.BUTTONS,svgIcon:n.MENU,allyLabel:f,parentComponent:e}),panelHelpButton:new i({className:v.BUTTONS,svgIcon:n.DESCRIPTION,allyLabel:C,parentComponent:e})}}setPanelMenuButtonClickHandler(e){this.panelMenuButton.setClickHandler(e)}setPanelHelpButtonClickHandler(e){this.panelHelpButton.setClickHandler(e)}setAreaClickHandler(e){this.getNode().addEventListener("click",(t=>e(t)))}}const y=[{doThis:"Select elements without commas",selector:"*:nth-child(n + 3):not(:last-child)",syntax:"No commas challenge #1",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <bento></bento>\n    <plate>\n      <apple></apple>\n    </plate>\n    <apple></apple>\n    <apple class="small"></apple>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <pickle class="small"></pickle>\n    '},{doThis:"Select elements without commas",selector:"*#fancy:not(:first-child):not(:last-child)",syntax:"No commas challenge #2",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate id="fancy"></plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate id="fancy">\n      <orange class="small"></orange>\n      <orange></orange>\n    </plate>\n    <plate id="fancy">\n       <pickle></pickle>\n    </plate>\n    <plate id="fancy"></plate>\n    '},{doThis:"Select elements without commas",selector:"*:nth-child(odd):not(:last-child)",syntax:"No commas challenge #3",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    </bento>\n    <plate>\n      <orange></orange>\n    </plate>\n    <apple class="small"></apple>\n    <apple></apple>\n    </plate>\n      <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate>\n    <apple class="small"></apple>\n  </plate>\n  <plate>\n    <pickle></pickle>\n  </plate>'},{doThis:"Select elements without commas",selector:"apple.small:first-child",syntax:"No commas challenge #4",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate for="Minato">\n      <apple></apple>\n    </plate>\n    <pickle class="small"></pickle>\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <apple for="Ethan"></apple>\n    <apple></apple>\n    </plate>\n      <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n  '},{doThis:"Select elements without commas",selector:"apple.small:not(:only-child)",syntax:"No commas challenge #5",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate>\n    <orange class="small"></orange>\n    <orange></orange>\n    </plate>\n    <apple class="small"></apple>\n    </plate>\n    <plate id="fancy">\n    <apple class="small"></apple>\n    <apple></apple>\n    </plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <apple class="small"></apple>\n  '},{doThis:"Select elements width combinators",selector:"plate:not(#fancy) .small",syntax:"Fun with combinators #1",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate id="fancy">\n    <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate>\n    </plate>\n    <plate>\n      <orange class="small"></orange>\n      <orange></orange>\n    </plate>\n  '},{doThis:"Select elements width combinators",selector:"[for] .small",syntax:"Fun with combinators #2",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <plate id="fancy" for="Minato">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate for="Alice">\n      <pickle></pickle>\n    </plate>\n    <bento for="Clara">\n      <pickle class="small"></pickle>\n    </bento>\n  '},{doThis:"Select elements width combinators",selector:"pickle:not(:last-child)",syntax:"Fun with combinators #3",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <pickle class="small"></pickle>\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <pickle class="small"></pickle>\n    <pickle></pickle>\n    <plate>\n      <pickle></pickle>\n    </plate>\n  '},{doThis:"Select elements width combinators",selector:"plate:nth-child(n + 2) *:first-child",syntax:"Fun with combinators #4",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <plate>\n      <orange class="small"></orange>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <bento></bento>\n    <plate>\n      <orange></orange>\n    </plate>\n    <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n  '},{doThis:"Select elements width combinators",selector:"* *:first-child",syntax:"Fun with combinators #5",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <apple></apple>\n    <apple class="small"></apple>\n    <apple class="small"></apple>\n    <plate id="fancy">\n      <apple></apple>\n      <apple></apple>\n      <apple></apple>\n    </plate>\n    <plate>\n      <orange></orange>\n      <orange></orange>\n    </plate>\n  '}],_=[{helpTitle:"Select elements by their type",selectorName:"Type Selector",doThis:"Select the plates",selector:"plate",syntax:"A",help:"Selects all elements of type <strong>A</strong>. Type refers to the type of tag, so <tag>div</tag>, <tag>p</tag> and <tag>ul</tag> are all different element types.",examples:["<strong>div</strong> selects all <tag>div</tag> elements.","<strong>p</strong> selects all <tag>p</tag> elements."],boardMarkup:"\n    <plate></plate>\n    <plate></plate>\n    "},{doThis:"Select the bento boxes",selector:"bento",syntax:"A",helpTitle:"Select elements by their type",selectorName:"Type Selector",help:"Selects all elements of type <strong>A</strong>. Type refers to the type of tag, so <tag>div</tag>, <tag>p</tag> and <tag>ul</tag> are all different element types.",examples:["<strong>div</strong> selects all <tag>div</tag> elements.","<strong>p</strong> selects all <tag>p</tag> elements."],boardMarkup:"\n    <bento></bento>\n    <plate></plate>\n    <bento></bento>\n    "},{doThis:"Select the fancy plate",selector:"#fancy",selectorName:"ID Selector",helpTitle:"Select elements with an ID",syntax:"#id",help:"Selects the element with a specific <strong>id</strong>. You can also combine the ID selector with the type selector.",examples:['<strong>#cool</strong> selects any element with <strong>id="cool"</strong>','<strong>ul#long</strong> selects <tag>ul id="long"</tag>'],boardMarkup:'\n    <plate id="fancy"></plate></plate>\n    <plate></plate>\n    <bento></bento>\n    '},{helpTitle:"Select an element inside another element",selectorName:"Descendant Selector",doThis:"Select the apple on the plate",selector:"plate apple",syntax:"A  B",help:"Selects all <strong>B</strong> inside of <strong>A</strong>. <strong>B</strong> is called a descendant because it is inside of another element.",examples:["<strong>p  strong</strong> selects all <tag>strong</tag> elements that are inside of any <tag>p</tag>",'<strong>#fancy  span</strong> selects any <tag>span</tag> elements that are inside of the element with <strong>id="fancy"</strong>'],boardMarkup:"\n    <bento></bento>\n    <plate>\n      <apple></apple>\n    </plate>\n    <apple></apple>\n    "},{doThis:"Select the pickle on the fancy plate",selector:"#fancy pickle",helpTitle:"Combine the Descendant & ID Selectors",syntax:"#id  A",help:"You can combine any selector with the descendent selector.",examples:['<strong>#cool span</strong> selects all <tag>span</tag> elements that are inside of elements with <strong>id="cool"</strong>'],boardMarkup:'\n    <bento>\n    <orange></orange>\n    </bento>\n    <plate id="fancy">\n      <pickle></pickle>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    '},{doThis:"Select the small apples",selector:".small",selectorName:"Class Selector",helpTitle:"Select elements by their class",syntax:".classname",help:"The class selector selects all elements with that class attribute. Elements can only have one ID, but many classes.",examples:['<strong>.neato</strong> selects all elements with <strong>class="neato"</strong>'],boardMarkup:'\n    <apple></apple>\n    <apple class="small"></apple>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate></plate>\n    '},{doThis:"Select the small oranges",selector:"orange.small",helpTitle:"Combine the Class Selector",syntax:"A.className",help:"You can combine the class selector with other selectors, like the type selector.",examples:['<strong>ul.important</strong> selects all <tag>ul</tag> elements that have <strong>class="important"</strong>','<strong>#big.wide</strong> selects all elements with <strong>id="big"</strong> that also have <strong>class="wide"</strong>'],boardMarkup:'\n    <apple></apple>\n    <apple class="small"></apple>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <plate>\n      <orange></orange>\n    </plate>\n    <plate>\n      <orange class="small"></orange>\n    </plate>'},{doThis:"Select the small oranges in the bentos",selector:"bento orange.small",syntax:"Put your back into it!",helpTitle:"You can do it...",help:"Combine what you learned in the last few levels to solve this one!",boardMarkup:'\n    <bento>\n      <orange></orange>\n    </bento>\n    <orange class="small"></orange>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    '},{doThis:"Select all the plates and bentos",selector:"plate,bento",selectorName:"Comma Combinator",helpTitle:"Combine, selectors, with... commas!",syntax:"A, B",help:"Thanks to Shatner technology, this selects all <strong>A</strong> and <strong>B</strong> elements. You can combine any selectors this way, and you can specify more than two.",examples:['<strong>p, .fun</strong> selects all <tag>p</tag> elements as well as all elements with <strong>class="fun"</strong>',"<strong>a, p, div</strong> selects all <tag>a</tag>, <tag>p</tag> and <tag>div</tag> elements"],boardMarkup:'\n    <pickle class="small"></pickle>\n    <pickle></pickle>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <bento>\n      <pickle></pickle>\n    </bento>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <pickle></pickle>\n    <pickle class="small"></pickle>\n    '},{doThis:"Select all the things!",selector:"*",selectorName:"The Universal Selector",helpTitle:"You can select everything!",syntax:"*",help:"You can select all elements with the universal selector! ",examples:["<strong>p *</strong> selects any element inside all <tag>p</tag> elements."],boardMarkup:'\n    <apple></apple>\n    <plate>\n      <orange class="small"></orange>\n    </plate>\n    <bento></bento>\n    <bento>\n      <orange></orange>\n    </bento>\n    <plate id="fancy"></plate>\n    '},{doThis:"Select everything on a plate",selector:"plate *",syntax:"A  *",helpTitle:"Combine the Universal Selector",help:"This selects all elements inside of <strong>A</strong>.",examples:["<strong>p *</strong> selects every element inside all <tag>p</tag> elements.",'<strong>ul.fancy *</strong> selects every element inside all <tag>ul class="fancy"</tag> elements.'],boardMarkup:'\n    <plate id="fancy">\n      <orange class="small"></orange>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <apple class="small"></apple>\n    <plate>\n      <apple></apple>\n    </plate>'},{doThis:"Select every apple that's next to a plate",selector:"plate + apple",helpTitle:"Select an element that directly follows another element",selectorName:"Adjacent Sibling Selector",syntax:"A + B",help:"This selects all <strong>B</strong> elements that directly follow <strong>A</strong>. Elements that follow one another are called siblings. They're on the same level, or depth. <br/><br/>In the HTML markup for this level, elements that have the same indentation are siblings.",examples:['<strong>p + .intro</strong> selects every element with <strong>class="intro"</strong> that directly follows a <tag>p</tag>',"<strong>div + a</strong> selects every <tag>a</tag> element that directly follows a <tag>div</tag>"],boardMarkup:'\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <plate></plate>\n    <apple class="small"></apple>\n    <plate></plate>\n    <apple></apple>\n    <apple class="small"></apple>\n    <apple class="small"></apple>\n    '},{selectorName:"General Sibling Selector",helpTitle:"Select elements that follows another element",syntax:"A ~ B",doThis:"Select the pickles beside the bento",selector:"bento ~ pickle",help:"You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.",examples:["<strong>A ~ B</strong> selects all <strong>B</strong> that follow a <strong>A</strong>"],boardMarkup:'\n    <pickle></pickle>\n    <bento>\n      <orange class="small"></orange>\n    </bento>\n    <pickle class="small"></pickle>\n    <pickle></pickle>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <plate>\n      <pickle class="small"></pickle>\n    </plate>\n    '},{selectorName:"Child Selector",syntax:"A > B ",doThis:"Select the apple directly on a plate",selector:"plate > apple",helpTitle:"Select direct children of an element",help:"You can select elements that are direct children of other elements. A child element is any element that is nested directly in another element. <br><br>Elements that are nested deeper than that are called descendant elements.",examples:["<strong>A > B</strong> selects all <strong>B</strong> that are a direct children <strong>A</strong>"],boardMarkup:'\n    <plate>\n      <bento>\n        <apple></apple>\n      </bento>\n    </plate>\n    <plate>\n      <apple></apple>\n    </plate>\n    <plate></plate>\n    <apple></apple>\n    <apple class="small"></apple>\n    '},{selectorName:"First Child Pseudo-selector",helpTitle:"Select a first child element inside of another element",doThis:"Select the top orange",selector:"plate :first-child",syntax:":first-child",help:"You can select the first child element. A child element is any element that is directly nested in another element. You can combine this pseudo-selector with other selectors.",examples:["<strong>:first-child</strong> selects all first child elements.","<strong>p:first-child</strong> selects all first child <tag>p</tag> elements.","<strong>div p:first-child</strong> selects all first child <tag>p</tag> elements that are in a <tag>div</tag>."],boardMarkup:'\n    <bento></bento>\n    <plate></plate>\n    <plate>\n      <orange></orange>\n      <orange></orange>\n      <orange></orange>\n    </plate>\n    <pickle class="small"></pickle>\n    '},{selectorName:"Only Child Pseudo-selector",helpTitle:"Select an element that are the only element inside of another one.",doThis:"Select the apple and the pickle on the plates",selector:"plate :only-child",syntax:":only-child",help:"You can select any element that is the only element inside of another one.",examples:["<strong>span:only-child</strong> selects the <tag>span</tag> elements that are the only child of some other element.","<strong>ul li:only-child</strong> selects the only <tag>li</tag> element that are in a <tag>ul</tag>."],boardMarkup:'\n    <plate>\n      <apple></apple>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    <bento>\n      <pickle></pickle>\n    </bento>\n    <plate>\n      <orange class="small"></orange>\n      <orange></orange>\n    </plate>\n    <pickle class="small"></pickle>\n    '},{selectorName:"Last Child Pseudo-selector",helpTitle:"Select the last element inside of another element",doThis:"Select the small apple and the pickle",selector:".small:last-child",syntax:":last-child",help:"You can use this selector to select an element that is the last child element inside of another element. <br><br>Pro Tip &rarr; In cases where there is only one element, that element counts as the first-child, only-child and last-child!",examples:["<strong>:last-child</strong> selects all last-child elements.","<strong>span:last-child</strong> selects all last-child <tag>span</tag> elements.","<strong>ul li:last-child</strong> selects the last <tag>li</tag> elements inside of any <tag>ul</tag>."],boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"></apple>\n    </plate>\n    <plate></plate>\n    <plate>\n      <orange class="small"></orange>\n      <orange></orange>\n    </plate>\n    <pickle class="small"></pickle>'},{selectorName:"Nth Child Pseudo-selector",helpTitle:"Select an element by its order in another element",doThis:"Select the 3rd plate",selector:":nth-child(3)",syntax:":nth-child(A)",help:"Selects the <strong>nth</strong> (Ex: 1st, 3rd, 12th etc.) child element in another element.",examples:["<strong>:nth-child(8)</strong> selects every element that is the 8th child of another element.","<strong>div p:nth-child(2)</strong> selects the second <strong>p</strong> in every <strong>div</strong>"],boardMarkup:'\n    <plate></plate>\n    <plate></plate>\n    <plate></plate>\n    <plate id="fancy"></plate>\n    '},{selectorName:"Nth Last Child Selector",helpTitle:"Select an element by its order in another element, counting from the back",doThis:"Select the 1st bento",selector:"bento:nth-last-child(3)",syntax:":nth-last-child(A)",help:"Selects the children from the bottom of the parent. This is like nth-child, but counting from the back!",examples:["<strong>:nth-last-child(2)</strong> selects all second-to-last child elements."],boardMarkup:"\n    <plate></plate>\n    <bento></bento>\n    <plate>\n      <orange></orange>\n      <orange></orange>\n      <orange></orange>\n    </plate>\n    <bento></bento>\n    "},{selectorName:"First of Type Selector",helpTitle:"Select the first element of a specific type",doThis:"Select first apple",selector:"apple:first-of-type",syntax:":first-of-type",help:"Selects the first element of that type within another element.",examples:["<strong>span:first-of-type</strong> selects the first <tag>span</tag> in any element."],boardMarkup:'\n    <orange class="small"></orange>\n    <apple></apple>\n    <apple class="small"></apple>\n    <apple></apple>\n    <apple class="small"></apple>\n    <plate>\n      <orange class="small"></orange>\n      <orange></orange>\n    </plate>\n    '},{selectorName:"Nth of Type Selector",doThis:"Select all even plates",selector:"plate:nth-of-type(even)",syntax:":nth-of-type(A)",help:"Selects a specific element based on its type and order in another element - or even or odd instances of that element.",examples:["<strong>div:nth-of-type(2)</strong> selects the second instance of a div.","<strong>.example:nth-of-type(odd)</strong> selects all odd instances of a the example class."],boardMarkup:'\n    <plate></plate>\n    <plate></plate>\n    <plate></plate>\n    <plate></plate>\n    <plate id="fancy"></plate>\n    <plate></plate>\n    '},{selectorName:"Nth-of-type Selector with Formula",doThis:"Select every 2nd plate, starting from the 3rd",selector:"plate:nth-of-type(2n+3)",syntax:":nth-of-type(An+B)",help:"The nth-of-type formula selects every nth element, starting the count at a specific instance of that element.",examples:["<strong>span:nth-of-type(6n+2)</strong> selects every 6th instance of a <tag>span</tag>, starting from (and including) the second instance."],boardMarkup:'\n    <plate></plate>\n    <plate>\n      <pickle class="small"></pickle>\n    </plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate></plate>\n    <plate>\n      <apple></apple>\n    </plate>\n    <plate></plate>\n    '},{selectorName:"Only of Type Selector",helpTitle:"Select elements that are the only ones of their type within of their parent element",selector:"apple:only-of-type",syntax:":only-of-type",doThis:"Select the apple on the middle plate",help:"Selects the only element of its type within another element.",examples:["<strong>p span:only-of-type</strong> selects a <tag>span</tag> within any <tag>p</tag> if it is the only <tag>span</tag> in there."],boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"></apple>\n      <apple></apple>\n    </plate>\n    <plate>\n      <apple class="small"></apple>\n    </plate>\n    <plate>\n      <pickle></pickle>\n    </plate>\n    '},{selectorName:"Last of Type Selector",helpTitle:"Select the last element of a specific type",doThis:"Select the last apple and orange",selector:".small:last-of-type",syntax:":last-of-type",help:"Selects each last element of that type within another element. Remember type refers the kind of tag, so <tag>p</tag> and <tag>span</tag> are different types. <br><br> I wonder if this is how the last dinosaur was selected before it went extinct.",examples:["<strong>div:last-of-type</strong> selects the last <tag>div</tag> in every element.","<strong>p span:last-of-type</strong> selects the last <tag>span</tag> in every <tag>p</tag>."],boardMarkup:'\n    <orange class="small"></orange>\n    <orange class="small"></orange>\n    <pickle></pickle>\n    <pickle></pickle>\n    <apple class="small"></apple>\n    <apple class="small"></apple>\n    '},{selectorName:"Empty Selector",helpTitle:"Select elements that don't have children",doThis:"Select the empty bentos",selector:"bento:empty",syntax:":empty",help:"Selects elements that don't have any other elements inside of them.",examples:["<strong>div:empty</strong> selects all empty <tag>div</tag> elements."],boardMarkup:'\n    <bento></bento>\n    <bento>\n      <pickle class="small"></pickle>\n    </bento>\n    <plate></plate>\n    <bento></bento>'},{selectorName:"Negation Pseudo-class",helpTitle:"Select all elements that don't match the negation selector",doThis:"Select the big apples",selector:"apple:not(.small)",syntax:":not(X)",help:'You can use this to select all elements that do not match selector <strong>"X"</strong>.',examples:['<strong>:not(#fancy)</strong> selects all elements that do not have <strong>id="fancy"</strong>.',"<strong>div:not(:first-child)</strong> selects every <tag>div</tag> that is not a first child.",'<strong>:not(.big, .medium)</strong> selects all elements that do not have <strong>class="big"</strong> or <strong>class="medium"</strong>.'],boardMarkup:'\n    <plate id="fancy">\n      <apple class="small"></apple>\n    </plate>\n    <plate>\n      <apple></apple>\n    </plate>\n    <apple></apple>\n    <plate>\n      <orange class="small"></orange>\n    </plate>\n    <pickle class="small"></pickle>\n    '},{selectorName:"Attribute Selector",helpTitle:"Select all elements that have a specific attribute",doThis:"Select the items for someone",selector:"[for]",syntax:"[attribute]",help:'Attributes appear inside the opening tag of an element, like this: <tag>span attribute="value"</tag>. An attribute does not always have a value, it can be blank!',examples:['<strong>a[href]</strong> selects all <tag>a</tag> elements that have a <strong>href="anything"</strong> attribute.','<strong>[type]</strong> selects all elements that have a <strong>type="anything"</strong>. attribute'],boardMarkup:'\n    <bento>\n      <apple class="small"></apple>\n    </bento>\n    <apple for="Ethan"></apple>\n    <plate for="Alice">\n      <pickle></pickle>\n    </plate>\n    <bento for="Clara">\n      <orange></orange>\n    </bento>\n    <pickle></pickle>'},{selectorName:"Attribute Selector",helpTitle:"Select all elements that have a specific attribute",doThis:"Select the plates for someone",selector:"plate[for]",syntax:"A[attribute]",help:"Combine the attribute selector with another selector (like the tag name selector) by adding it to the end.",examples:['<strong>[value]</strong> selects all elements that have a <strong>value="anything"</strong> attribute.','<strong>a[href]</strong> selects all <tag>a</tag> elements that have a <strong>href="anything"</strong> attribute.',"<strong>input[disabled]</strong> selects all <tag>input</tag> elements with the <strong>disabled</strong> attribute"],boardMarkup:'\n    <plate for="Sarah">\n      <pickle></pickle>\n    </plate>\n    <plate for="Luke">\n      <apple></apple>\n    </plate>\n    <plate></plate>\n    <bento for="Steve">\n      <orange></orange>\n    </bento>\n    '},{selectorName:"Attribute Value Selector",helpTitle:"Select all elements that have a specific attribute value",doThis:"Select Vitaly's meal",selector:"[for=Vitaly]",syntax:'[attribute="value"]',help:"Attribute selectors are case sensitive, each character must match exactly.",examples:['<strong>input[type="checkbox"]</strong> selects all checkbox input elements.'],boardMarkup:'\n    <apple for="Alexei"></apple>\n    <bento for="Albina">\n      <apple></apple>\n    </bento>\n    <bento for="Vitaly">\n      <orange></orange>\n    </bento>\n    <pickle></pickle>\n    '},{selectorName:"Attribute Starts With Selector",helpTitle:"Select all elements with an attribute value that starts with specific characters",doThis:"Select the items for names that start with 'Sa'",selector:'[for^="Sa"]',syntax:'[attribute^="value"]',help:"You can use quotes around the value in the selector, or not&mdash;it's optional!",examples:['<strong>.toy[category^="Swim"]</strong> selects elements with class <strong>toy</strong> and either <strong>category="Swimwear</strong> or <strong>category="Swimming"</strong>.'],boardMarkup:'\n    <plate for="Sam">\n      <pickle></pickle>\n    </plate>\n    <bento for="Sarah">\n      <apple class="small"></apple>\n    </bento>\n    <bento for="Mary">\n      <orange></orange>\n    </bento>\n    '},{selectorName:"Attribute Ends With Selector",helpTitle:"Select all elements with an attribute value that ends with specific characters",doThis:"Select the items for names that end with 'ato'",selector:'[for$="ato"]',syntax:'[attribute$="value"]',help:"",examples:['<strong>img[src$=".jpg"]</strong> selects all images display a <strong>.jpg</strong> image.'],boardMarkup:'\n    <apple class="small"></apple>\n    <bento for="Hayato">\n      <pickle></pickle>\n    </bento>\n    <apple for="Ryota"></apple>\n    <plate for="Minato">\n      <orange></orange>\n    </plate>\n    <pickle class="small"></pickle>\n    '},{selectorName:"Attribute Wildcard Selector",helpTitle:"Select all elements with an attribute value that contains specific characters anywhere",syntax:'[attribute*="value"]',doThis:"Select the meals for names that contain 'obb'",selector:'[for*="obb"]',help:"A useful selector if you can identify a common pattern in things like <strong>class</strong>, <strong>href</strong> or <strong>src</strong> attributes.",examples:['<strong>img[src*="/thumbnails/"]</strong> selects all image elements that show images from the "thumbnails" folder.','<strong>[class*="heading"]</strong> selects all elements with "heading" in their class, like <strong>class="main-heading"</strong> and <strong>class="sub-heading"</strong>'],boardMarkup:'\n    <bento for="Robbie">\n      <apple></apple>\n    </bento>\n    <bento for="Timmy">\n      <pickle></pickle>\n    </bento>\n    <bento for="Bobby">\n      <orange></orange>\n    </bento>\n    '}];var S;!function(e){e.CURRENT_LEVEL="currentLevel",e.PROGRESS="progress"}(S||(S={}));class L{static loadCurrentLevel(){var e;return+(null!==(e=localStorage.getItem(S.CURRENT_LEVEL))&&void 0!==e?e:0)}static getCurrentLevel(){return L.currentLevel}static saveToStorage(){localStorage.setItem(S.CURRENT_LEVEL,this.currentLevel.toString())}static cleanStorage(){localStorage.removeItem(S.CURRENT_LEVEL)}static setNextLevel(){this.currentLevel+=1,L.levelChangeNotify()}static setPrevLevel(){this.currentLevel-=1,L.levelChangeNotify()}static setLevel(e){this.currentLevel=e,L.levelChangeNotify()}static setChangeLevelHandler(e){this.onLevelChangeHandlers.push(e)}static levelChangeNotify(){this.onLevelChangeHandlers.forEach((e=>e()))}}L.currentLevel=L.loadCurrentLevel(),L.onLevelChangeHandlers=[];class k{constructor(){this.levels=[],this.levels=this.mergeLevels(_,y),this.loadFromStorage()}mergeLevels(e,...t){const n=e=>e.slice().map((e=>Object.assign({},e)));let a=n(e);const l=t.map((e=>n(e)));return l.forEach((e=>e.forEach((e=>e.isNew=!0)))),a=a.concat(...l),a}getLevels(){return this.levels}saveToStorage(){const e=[],t=this.levels.filter((e=>e.isComplete));if(t.length>0)for(const n of t){const{isComplete:t,isWithHelp:a}=n,l={[this.levels.findIndex((e=>e===n)).toString()]:{isComplete:t,isWithHelp:a}};e.push(l)}e.length>0&&localStorage.setItem(S.PROGRESS,JSON.stringify(e))}loadFromStorage(){const e=localStorage.getItem(S.PROGRESS);if(!e)return;const t=JSON.parse(e);for(const e of t){const t=Object.keys(e);for(const n of t){const t=Number(n),a=e[t];Object.assign(this.levels[t],a)}}}resetLevels(){localStorage.removeItem(S.PROGRESS),this.levels=this.mergeLevels(_,y),L.cleanStorage(),L.setLevel(0)}}const I={tagName:"section",className:"code-view"},H={ROOT:I.className,HEADLINE:`${I.className}__headline`,TITLE:`${I.className}__title`,FILENAME:`${I.className}__filename`,FIELD:`${I.className}__field`,STROKE_NUMBERS_COLUMN:`${I.className}__field-stroke-numbers-column`,STROKES_COLUMN:`${I.className}__field-strokes-column`};class w extends s{constructor(e,t){super(l(I,t));const n=new s({tagName:"header",className:H.HEADLINE,parentComponent:this});new s({tagName:"h4",className:H.TITLE,parentComponent:n,textContent:e.title}),new s({tagName:"span",className:H.FILENAME,parentComponent:n,textContent:e.filename});const a=new s({tagName:"div",className:H.FIELD,parentComponent:this}),o=new s({tagName:"div",className:H.STROKE_NUMBERS_COLUMN,parentComponent:a}),i=new Array(20).fill(0).map(((e,t)=>new s({tagName:"span",textContent:(t+1).toString()})));o.append(...i);new s({tagName:"div",className:H.STROKES_COLUMN,parentComponent:a}).append(...e.content)}}const M={tagName:"input",className:"input"};class x extends s{constructor(e){const t=l(M,e);super(t),this.node.type=t.type||"text",this.node.placeholder=t.placeholder||"",this.node.autofocus=t.autofocus||!1}setKeydownHandler(e){"function"==typeof e&&this.node.addEventListener("keydown",(t=>e(t)))}}const A={tagName:"section",className:"editor"},O={COMPONENT_ALLY_TITLE:"Code editor",CSS_EDITOR_TITLE:"CSS Editor",CSS_EDITOR_FILENAME:"style.css",HTML_VIEWER_TITLE:"HTML Viewer",HTML_VIEWER_FILENAME:"table.html",EXAMPLES_TITLE:"Examples",ENTER_BUTTON_TEXT:"Enter",ENTER_BUTTON_ALLY_TEXT:"Apply selector",HELP_BUTTON_TEXT:"Help",HELP_BUTTON_ALLY_TEXT:"Get help",CSS_NOTE:'{ \n/* Styles would go here. */\n}\n\n/*\nType a number to skip to a level.\nEx → "5" for level 5\n*/'},B={ROOT:A.className,CSS_EDITOR:[`${A.className}__css-editor`,"code-view--light"],HTML_VIEWER:[`${A.className}__html-viewer`,"code-view--dark"],HTML_VIEWER_CONTENT:"markup",SELECTOR_INPUT_FIELD:"code-view__selector-field",SELECTOR_INPUT_PLACEHOLDER:"Type in a CSS selector",SELECTOR_NOTE:"code-view__css-note",SELECTOR_INPUT_FIELD_BUTTON_GROUP:"code-view__input-stroke-buttons",SELECTOR_INPUT_FIELD_BUTTON:"button--code"};class R extends s{constructor(t,n){super(l(A,n)),new s({tagName:"h3",className:e.ALLY_HIDDEN,textContent:O.COMPONENT_ALLY_TITLE,parentComponent:this});const{selectorInput:a,selectorEnterButton:o,selectorHelpButton:i}=this.setCssCodeView();this.selectorInput=a,this.selectorEnterButton=o,this.selectorHelpButton=i,this.setHtmlCodeView(t)}setCssCodeView(){const e=new s({tagName:"p",className:B.SELECTOR_INPUT_FIELD}),t=new x({placeholder:B.SELECTOR_INPUT_PLACEHOLDER,parentComponent:e,autofocus:!0}),n=new s({tagName:"span",className:B.SELECTOR_INPUT_FIELD_BUTTON_GROUP,parentComponent:e}),a=new i({className:B.SELECTOR_INPUT_FIELD_BUTTON,allyLabel:O.ENTER_BUTTON_ALLY_TEXT,textContent:O.ENTER_BUTTON_TEXT,parentComponent:n}),l=new i({className:B.SELECTOR_INPUT_FIELD_BUTTON,allyLabel:O.HELP_BUTTON_ALLY_TEXT,textContent:O.HELP_BUTTON_TEXT,parentComponent:n}),o=new s({tagName:"p",className:B.SELECTOR_NOTE,textContent:O.CSS_NOTE});return new w({title:O.CSS_EDITOR_TITLE,filename:O.CSS_EDITOR_FILENAME,content:[e,o]},{className:B.CSS_EDITOR,parentComponent:this}),{selectorInput:t,selectorEnterButton:a,selectorHelpButton:l}}setHtmlCodeView(e){const{boardMarkup:t}=e,n=document.createElement("div");n.innerHTML=t;const l=function e(t){const n=[];for(const l of t){const t=document.createElement("div");t.classList.add("children-wrapper");const s=l.id?` <span class="attribute">id</span>=<span class="string">"${l.id}"</span>`:"",o=l.className?` <span class="attribute">class</span>=<span class="string">"${l.className}"</span>`:"",i=l.getAttribute("for")?` <span class="attribute">for</span>=<span class="string">"${l.getAttribute("for")}"</span>`:"",r=l.children.length>0?"":"/",c=`<<span class="section">${l.tagName.toLocaleLowerCase()}</span>${s}${o}${i}${r}>`;if(t.innerHTML=c,l.children.length>0){const n=e(Array.from(l.children));t.append(...n);const s=document.createTextNode("</"),o=document.createTextNode(">"),i=a(`<span class="section">${l.tagName.toLowerCase()}</span>`);t.append(s,i,o)}n.push(t)}return n}(Array.from(n.children));l.unshift(document.createTextNode('<div class="table">')),l.push(document.createTextNode("</div>"));const o=new s({className:[B.HTML_VIEWER_CONTENT,"code"]});o.getNode().append(...l);new w({title:O.HTML_VIEWER_TITLE,filename:O.HTML_VIEWER_FILENAME,content:[o]},{className:B.HTML_VIEWER,parentComponent:this})}setElementsHoverHandler(e){if("function"!=typeof e)return 0;this.getNode().addEventListener("mouseover",(t=>{e(t)}))}getSelectorInput(){return this.selectorInput.getNode()}getSelectorEnterButton(){return this.selectorEnterButton.getNode()}getSelectorHelpButton(){return this.selectorHelpButton.getNode()}setSelectorKeydownHandler(e){this.selectorInput.setKeydownHandler(e)}setSelectorEnterButtonClickHandler(e){this.selectorEnterButton.setClickHandler(e)}setSelectorHelpButtonClickHandler(e){this.selectorHelpButton.setClickHandler(e)}}const P={tagName:"div",className:"note"},$={ROOT:P.className,DESCRIPTION:`${P.className}__description`,TITLE:`${P.className}__title`,TEXT:`${P.className}__text`,STRONG_TEXT:`${P.className}__text--strong`,CODE:`${P.className}__code`,SUBMIT_BUTTON:[`${P.className}__submit-button`,"button--accent"],TOGGLE_BUTTON:`${P.className}__toggle-button`},U={TITLE:"No worries, you've got this!",TEXT_MARKUP:`<p class="${$.TITLE}">No worries, you've got this!</p>\n  <p class="${$.TEXT}">\n    You're about to learn CSS Selectors! Selectors are how you pick which element to apply styles to.\n  </p>\n  <p class="${$.TEXT} ${$.STRONG_TEXT}">Exhibit 1 A CSS Rule</p>\n  <pre class="${$.CODE}"><kbd><code>p {\n    margin-bottom: 12px;\n  }</code></kbd></pre>\n  <p class="${$.TEXT}">\n    Here, the "p" is the selector (selects all elements) and applies the margin-bottom style.\n  </p>\n  <p class="${$.TEXT}">\n    "To play, type in a CSS selector in the editor below to select the correct items on the table.If you get it right, you'll advance to the next level.\n  </p>\n  <p class="${$.TEXT}"> Hover over the items on the table to see their HTML markup. </p>\n  <p class="${$.TEXT}"> Get help with selectors on the right! →</p>`,SUBMIT_BUTTON:"Ok, got it!",TOGGLE_BUTTON:"Help, I'm stuck!"};class D extends s{constructor(e){super(l(P,e)),this.description=new s({tagName:"div",className:$.DESCRIPTION,parentComponent:this}),new s({tagName:"p",className:$.TITLE,textContent:U.TITLE,parentComponent:this.description}),this.description.getNode().innerHTML=U.TEXT_MARKUP,this.submitButton=new i({className:$.SUBMIT_BUTTON,textContent:U.SUBMIT_BUTTON,parentComponent:this.description}),this.toggleButton=new i({className:$.TOGGLE_BUTTON,textContent:U.TOGGLE_BUTTON,parentComponent:this}),this.setToggleButtonClickHandler(this.showDescription.bind(this)),this.setSubmitButtonClickHandler(this.hideDescription.bind(this))}showDescription(){const e=this.description.getNode();e.style.paddingTop="20px",e.style.paddingBottom="20px";const t=e.scrollHeight;e.style.height=t+"px",this.toggleButton.addClass("button--hidden")}hideDescription(){const e=this.description.getNode();e.style.paddingTop="0px",e.style.paddingBottom="0px",e.style.height="0px",this.toggleButton.removeClass("button--hidden")}setToggleButtonClickHandler(e){this.toggleButton.setClickHandler(e)}setSubmitButtonClickHandler(e){this.submitButton.setClickHandler(e)}}const G={tagName:"section",className:"table"},X="CSS representation table",V="You did it!",Y="You rock at CSS.",Z={ROOT:G.className,SURFACE:`${G.className}__surface`,NAMETAG_PLACE:`${G.className}__nametag-place`,NAMETAG:`${G.className}__nametag`,DISHES_PLACE:`${G.className}__dishes`,WIN_TEXT_CONTAINER:`${G.className}__win-text`,WIN_TEXT_TITLE:`${G.className}__win-text-title`,WIN_TEXT_BODY:`${G.className}__win-text-body`,EDGE:`${G.className}__edge`,LEG:`${G.className}__leg`},W="pop",F="strobe",K="shake",j="clean";class q extends s{constructor(t,n){super(l(G,n)),new s({tagName:"h3",className:e.ALLY_HIDDEN,textContent:X,parentComponent:this});const{boardMarkup:a,selector:o}=t;this.tableSurface=new s({className:Z.SURFACE,parentComponent:this}),this.dishesPlace=new s({className:Z.DISHES_PLACE,parentComponent:this.tableSurface});const i=new s({className:Z.EDGE,parentComponent:this});new Array(2).fill(0).forEach((()=>new s({className:Z.LEG,parentComponent:i}))),this.dishesPlace.getNode().innerHTML=a,this.setNametagPlace(),this.levelElements=Array.from(this.dishesPlace.getNode().children),this.targetElements=Array.from(this.dishesPlace.getNode().querySelectorAll(o)),this.setInitAnimation()}setInitAnimation(){for(const e of this.levelElements)e.classList.add(W);this.animateTargetSelectorElements()}setNametagPlace(){const e=new s({className:Z.NAMETAG_PLACE,parentComponent:this.tableSurface}),t=Array.from(this.dishesPlace.getNode().querySelectorAll("[for]"));t.length>0&&t.forEach((t=>{var n;const a=new s({tagName:"div",className:Z.NAMETAG,textContent:null!==(n=t.getAttribute("for"))&&void 0!==n?n:""});e.append(a);const l=()=>{const e=t.offsetLeft,n=t.clientWidth,l=this.dishesPlace.getNode().clientHeight;a.getNode().style.translate="-50% 0%",a.getNode().style.left=`${e+n/2}px`,a.getNode().style.top="-20px",a.getNode().style.width=.8*l+"px",a.getNode().style.fontSize=.25*l+"px"};setTimeout((()=>{l()}),0),window.addEventListener("resize",l)}))}animateTargetSelectorElements(){this.levelElements[0].addEventListener("animationend",(()=>{for(const e of this.levelElements)e.classList.remove(W);for(const e of this.targetElements)e.classList.add(F)}))}animateUserSelectorInput(e){let t=[];try{t=Array.from(this.dishesPlace.getNode().querySelectorAll(e))}catch(e){return}if(0===t.length)return;t.every(((e,t)=>e===this.targetElements[t]))?t.forEach((e=>{e.classList.add(j)})):t.forEach((e=>{e.classList.contains(F)?(e.classList.remove(F),e.classList.add(K),e.addEventListener("animationend",(()=>{e.classList.remove(K),e.classList.add(F)}))):(e.classList.add(K),e.addEventListener("animationend",(()=>e.classList.remove(K))))}))}setElementsHoverHandler(e){if("function"!=typeof e)return 0;this.getNode().addEventListener("mouseover",(t=>{e(t)}))}setWinText(){const e=new s({tagName:"div",className:Z.WIN_TEXT_CONTAINER}),t=new s({tagName:"p",className:Z.WIN_TEXT_TITLE,textContent:V}),n=new s({tagName:"p",className:Z.WIN_TEXT_BODY,textContent:Y});e.append(t,n),this.dishesPlace.getNode().innerHTML="",this.dishesPlace.append(e)}}function z(e,t,n=0){const a=e.offsetTop,l=e.offsetLeft,s=e.clientWidth;t.getNode().style.translate="-50% 0%",t.getNode().style.top=a-n+"px",t.getNode().style.left=`${l+s/2}px`}const Q={tagName:"section",className:"playground"},J={ROOT:Q.className,DESCRIPTION:`${Q.className}__description`,NOTE:`${Q.className}__note`,TABLE:`${Q.className}__table`,EDITOR:`${Q.className}__editor`,EDITOR_SHAKE:"shake",TOOLTIP:`${Q.className}__tooltip`,TOOLTIP_VISIBILITY:`${Q.className}__tooltip--visible`,DISHES_SIZE:"small"};class ee extends s{constructor(t,n){super(l(Q,n)),new s({tagName:"h2",textContent:"Playground",className:e.ALLY_HIDDEN,parentComponent:this}),this.taskDescription=new s({tagName:"p",className:J.DESCRIPTION,textContent:t.doThis,parentComponent:this}),this.note=new D({className:J.NOTE,parentComponent:this}),this.table=new q(t,{className:J.TABLE,parentComponent:this}),this.editor=new R(t,{className:J.EDITOR,parentComponent:this}),this.tooltip=new s({className:J.TOOLTIP,parentComponent:this.table})}setNoteToggleButtonClickHandler(e){this.note.setToggleButtonClickHandler(e)}setNoteSubmitButtonClickHandler(e){this.note.setSubmitButtonClickHandler(e)}setCsssHoverHandler(e){this.table.setElementsHoverHandler(e)}setMarkupHoverHandler(e){this.editor.setElementsHoverHandler(e)}setSelectorKeydownHandler(e){this.editor.setSelectorKeydownHandler(e)}setSelectorEnterButtonClickHandler(e){this.editor.setSelectorEnterButtonClickHandler(e)}setSelectorHelpButtonClickHandler(e){this.editor.setSelectorHelpButtonClickHandler(e)}setWinText(){this.table.setWinText()}animateUserSelectorInput(e){this.table.animateUserSelectorInput(e)}animateWrongInput(){this.editor.addClass(J.EDITOR_SHAKE),this.editor.getNode().addEventListener("animationend",(()=>this.editor.removeClass(J.EDITOR_SHAKE)))}getQueryElements(e){try{return this.table.getNode().querySelectorAll(e)}catch(e){return[]}}getSelectorInput(){return this.editor.getSelectorInput()}getSelectorEnterButton(){return this.editor.getSelectorEnterButton()}getSelectorHelpButton(){return this.editor.getSelectorHelpButton()}setTooltip(e,...t){const n=e.tagName.toLocaleLowerCase(),a=`<${n}${e.id?` id="${e.id}"`:""}${e.className?" "+(e.classList.contains(J.DISHES_SIZE)?`class="${J.DISHES_SIZE}"`:""):""}${e.getAttribute("for")?` for="${e.getAttribute("for")}"`:""}></${n}>`;this.tooltip.getNode().textContent=a;if(e instanceof HTMLElement)if(e.parentElement instanceof HTMLDivElement)z(e,this.tooltip,75);else{const t=e.parentElement;if(!t)return;z(t,this.tooltip,75)}this.tooltip.addClass(J.TOOLTIP_VISIBILITY),[e,...t].forEach((e=>{e.addEventListener("mouseout",(()=>{this.tooltip.removeClass(J.TOOLTIP_VISIBILITY)}))}))}}class te{constructor(e,t,n,a){this.container=e,this.level=t,this.taskModel=n,this.playgroundComponent=new ee(this.level,a),this.container.append(this.playgroundComponent.getNode()),this.tableElements=Array.from(document.querySelectorAll(`.${Z.DISHES_PLACE} *`)),this.markupElements=Array.from(document.querySelectorAll(`.${B.HTML_VIEWER_CONTENT} div`)),this.playgroundComponent.setCsssHoverHandler(this.onElementHover.bind(this,this.tableElements,this.markupElements)),this.playgroundComponent.setMarkupHoverHandler(this.onElementHover.bind(this,this.markupElements,this.tableElements)),this.playgroundComponent.setSelectorKeydownHandler(this.onInputFieldKeydownHandler.bind(this)),this.playgroundComponent.setSelectorEnterButtonClickHandler(this.onSelectorEnterButtonClickHandler.bind(this)),this.playgroundComponent.setSelectorHelpButtonClickHandler(this.onSelectorHelpButtonClickHandler.bind(this))}onElementHover(t,n,a){const l=t.findIndex((e=>e===a.target));return l>=0&&(n[l].classList.add(e.LIGHTUP),t[l].addEventListener("mouseout",(()=>{n[l].classList.remove(e.LIGHTUP)})),t[l].classList.add(e.LIGHTUP),t[l].addEventListener("mouseout",(()=>{t[l].classList.remove(e.LIGHTUP)})),this.showTooltip(l)),this}onInputFieldKeydownHandler(e){"Enter"===e.key&&this.sendSelector()}onSelectorEnterButtonClickHandler(){this.sendSelector()}sendSelector(){const e=this.playgroundComponent.getSelectorInput().value;if(!e)return;this.playgroundComponent.animateUserSelectorInput(e);const t=this.playgroundComponent.getQueryElements(e),n=Array.from(t);if(0===n.length)this.playgroundComponent.animateWrongInput();else{const{selector:e}=this.level,t=Array.from(this.playgroundComponent.getQueryElements(e));if(n.every(((e,n)=>e===t[n]))){this.level.isComplete=!0;const e=this.taskModel.getLevels().length-1;this.playgroundComponent.getNode().addEventListener("animationend",(()=>{L.getCurrentLevel()<e?L.setNextLevel():this.playgroundComponent.setWinText()}),{once:!0})}}}onSelectorHelpButtonClickHandler(){this.level.isWithHelp=!0;const e=this.playgroundComponent.getSelectorInput();e.value="";const t=this.level.selector.split("");let n=0;e.value+=t[n],n+=1;const a=setInterval((()=>{n<t.length?(e.value+=t[n],n+=1):(e.focus(),clearInterval(a))}),30)}destroy(){this.playgroundComponent.destroy()}showTooltip(e){const t=this.tableElements[e],n=this.markupElements[e];this.playgroundComponent.setTooltip(t,n)}}const ne={PLAYGROUND:`${E.className}__playground`,HELP:`${E.className}__help`,HELP_SELECTED_STATUS:`${E.className}__help--selected`,MENU:`${E.className}__menu`,MENU_SELECTED_STATUS:`${E.className}__menu--selected`};class ae{constructor(e){this.taskModel=new k,this.levels=this.taskModel.getLevels(),this.taskComponent=new b,this.container=e.getNode(),this.container.append(this.taskComponent.getNode()),this.setComponentHandlers(),L.setChangeLevelHandler(this.OnChangeLevelHandler.bind(this));const t=L.getCurrentLevel(),{helpComponent:n,menuComponent:a,playgroundService:l}=this.render(t);this.helpComponent=n,this.menuComponent=a,this.playgroundService=l,window.addEventListener("beforeunload",(()=>{L.saveToStorage(),this.taskModel.saveToStorage()}))}OnChangeLevelHandler(){this.helpComponent.destroy(),this.menuComponent.destroy(),this.playgroundService.destroy(),this.render(L.getCurrentLevel())}render(e){this.levels=this.taskModel.getLevels();const t=this.levels[e],n=new te(this.taskComponent.getNode(),t,this.taskModel,{className:ne.PLAYGROUND}),a={levels:this.levels,currentLevel:t},l=new d(a,{className:ne.HELP}),s=new N(a,{className:ne.MENU});return this.playgroundService=n,this.helpComponent=l,this.menuComponent=s,this.taskComponent.append(l,s),this.setChildComponentsHandlers(),{playgroundService:n,helpComponent:l,menuComponent:s}}setComponentHandlers(){this.taskComponent.setPanelHelpButtonClickHandler(this.OnPanelHelpButtonClickHandler.bind(this)),this.taskComponent.setPanelMenuButtonClickHandler(this.OnPanelMenuButtonClickHandler.bind(this)),this.taskComponent.setAreaClickHandler(this.OnTaskAreaClickHandler.bind(this))}setChildComponentsHandlers(){this.menuComponent.setCloseButtonClickHandler(this.OnMenuCloseButtonClickHandler.bind(this)),this.menuComponent.setResetButtonClickHandler(this.OnMenuResetButtonClickHandler.bind(this)),this.menuComponent.setListItemClickHandler(this.OnMenuListItemClickHandler),this.helpComponent.setPrevLevelButtonClickHandler(this.OnHelpPrevLevelButtonClickHandler.bind(this)),this.helpComponent.setNextLevelButtonClickHandler(this.OnHelpNextLevelButtonClickHandler.bind(this)),this.helpComponent.setMenuButtonClickHandler(this.OnHelpMenuButtonClickHandler.bind(this))}OnPanelMenuButtonClickHandler(){this.menuComponent.addClass(ne.MENU_SELECTED_STATUS)}OnPanelHelpButtonClickHandler(){this.helpComponent.addClass(ne.HELP_SELECTED_STATUS)}OnMenuCloseButtonClickHandler(){this.menuComponent.removeClass(ne.MENU_SELECTED_STATUS)}OnMenuResetButtonClickHandler(){this.taskModel.resetLevels()}OnMenuListItemClickHandler(e){L.setLevel(e)}OnHelpPrevLevelButtonClickHandler(){0!==L.getCurrentLevel()&&L.setPrevLevel()}OnHelpNextLevelButtonClickHandler(){L.getCurrentLevel()>=this.levels.length-1||L.setNextLevel()}OnHelpMenuButtonClickHandler(){this.menuComponent.addClass(ne.MENU_SELECTED_STATUS)}OnTaskAreaClickHandler(e){if(!(e.target instanceof Element))return;const t=!!e.target.closest("."+ne.HELP_SELECTED_STATUS),n=!!e.target.closest("."+this.taskComponent.buttonPanel.getNode().className);t||n||this.helpComponent.removeClass(ne.HELP_SELECTED_STATUS)}}const le={tagName:"a",className:"link"};class se extends s{constructor(e){const t=l(le,e);if(super(t),t.svgIcon){const e=a(t.svgIcon);this.setSvgIcon(e)}t.allyLabel&&this.append(new s({tagName:"span",className:"visually-hidden",textContent:t.allyLabel})),t.href&&(this.node.href=t.href)}setSvgIcon(e){this.node.append(e)}}const oe={tagName:"footer"},ie=[{className:"link--contact-icon",href:"https://github.com/Firebrand-RS",svgIcon:n.GITHUB_ICON,allyLabel:"To author Github"},{className:"link--contact-icon",href:"https://rs.school",svgIcon:n.SCHOOL_ICON,allyLabel:"To school page"}];class re extends s{constructor(e){super(l(oe,e)),this.append(...this.setLinks(ie)),this.append(new s({tagName:"p",textContent:"2023"}))}setLinks(e){return e.map((e=>new se(e)))}}const ce={tagName:"header"},pe=[{className:"logo",svgIcon:n.LOGO}];class he extends s{constructor(e){super(l(ce,e)),this.append(...this.setLinks(pe))}setLinks(e){return e.map((e=>new se(e)))}}const de={tagName:"main"};class me extends s{constructor(e){super(l(de,e))}}const ge="page",ue={HEADER:`${ge}__header`,MAIN:`${ge}__content`,FOOTER:`${ge}__footer`};new class{constructor(e){this.container=e}start(){const e=new he({className:ue.HEADER}),t=new me({className:ue.MAIN}),n=new re({className:ue.FOOTER});this.container.classList.add(ge),[e,t,n].forEach((e=>this.container.append(e.getNode()))),new ae(t)}}(document.body).start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,